[
    {
        "id": "fe55fd0440711865",
        "type": "tab",
        "label": "플로우 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "tab-influx-flux",
        "type": "tab",
        "label": "Influx Flux 조회(노드전용)",
        "disabled": false,
        "info": "HTTP/API 사용 안함. influxdb in 노드 + Flux만 사용"
    },
    {
        "id": "e1f88c7373da6479",
        "type": "tab",
        "label": "Influx Meta → influx_tag",
        "disabled": false,
        "info": ""
    },
    {
        "id": "52cfb2f927f95475",
        "type": "tab",
        "label": "Influx RAW → influx_hist",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ddfc91b523909b9a",
        "type": "tab",
        "label": "1단계: 스키마 생성(오류 수정)",
        "disabled": true,
        "info": ""
    },
    {
        "id": "4a01622f2f08cae3",
        "type": "tab",
        "label": "2단계: 데이터 업데이트/인서트(최종)",
        "disabled": true,
        "info": ""
    },
    {
        "id": "1dfd38348c12707e",
        "type": "tab",
        "label": "MQTT Backend",
        "disabled": true,
        "info": ""
    },
    {
        "id": "d3bb0228b3ec7779",
        "type": "influxdb",
        "hostname": "192.168.1.80",
        "port": 8086,
        "protocol": "http",
        "database": "database",
        "name": "eondb",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "influx_cfg",
        "type": "influxdb",
        "hostname": "192.168.1.80",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "Influx v2",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://192.168.1.80:8086",
        "timeout": "20",
        "rejectUnauthorized": true
    },
    {
        "id": "cfg_mqtt",
        "type": "mqtt-broker",
        "name": "Mosquitto Local",
        "broker": "192.168.1.80",
        "port": "1883",
        "clientid": "nodered-backend",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "pg_config",
        "type": "postgreSQLConfig",
        "name": "TimescaleDB",
        "host": "192.168.1.80",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "EcoAnP",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "node-red",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "admin",
        "passwordFieldType": "str"
    },
    {
        "id": "faaad4cdf9594a0b",
        "type": "postgreSQLConfig",
        "name": "TimescaleDB",
        "host": "192.168.1.80",
        "hostFieldType": "str",
        "port": 5432,
        "portFieldType": "num",
        "database": "EcoAnP",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "node-red",
        "applicationNameType": "str",
        "max": 10,
        "maxFieldType": "num",
        "idle": 1000,
        "idleFieldType": "num",
        "connectionTimeout": 10000,
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "admin",
        "passwordFieldType": "str"
    },
    {
        "id": "daea810c54b67f2c",
        "type": "postgreSQLConfig",
        "name": "TimescaleDB",
        "host": "192.168.1.80",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "EcoAnP",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "node-red",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "30000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "admin",
        "passwordFieldType": "str"
    },
    {
        "id": "c9efdb68018cf6b4",
        "type": "inject",
        "z": "fe55fd0440711865",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 460,
        "y": 200,
        "wires": [
            [
                "b2b746270a1078a6"
            ]
        ]
    },
    {
        "id": "b2b746270a1078a6",
        "type": "influxdb in",
        "z": "fe55fd0440711865",
        "influxdb": "d3bb0228b3ec7779",
        "name": "",
        "query": "from(bucket: \"5603a3eb-89e2-4e15-8cbb-60750c6588d3_raw\")\n  |> range(start: -24h)\n  |> filter(fn: (r) => r._measurement == \"1\")\n  |> filter(fn: (r) => r._field == \"1\" or r._field == \"2\" or r._field == \"3\")\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "EON",
        "x": 770,
        "y": 200,
        "wires": [
            [
                "feae57fc7b033dd1"
            ]
        ]
    },
    {
        "id": "32c3b3aa568d619d",
        "type": "split",
        "z": "fe55fd0440711865",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 530,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "feae57fc7b033dd1",
        "type": "debug",
        "z": "fe55fd0440711865",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 200,
        "wires": []
    },
    {
        "id": "inj-buckets",
        "type": "inject",
        "z": "tab-influx-flux",
        "name": "버킷 목록(buckets)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "fn-buckets"
            ]
        ]
    },
    {
        "id": "fn-buckets",
        "type": "function",
        "z": "tab-influx-flux",
        "name": "Flux: buckets()",
        "func": "// 버킷 전체 목록\nmsg.query = 'buckets() |> keep(columns: [\"name\",\"id\",\"orgID\",\"createdAt\"])';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "inj-tagkeys",
        "type": "inject",
        "z": "tab-influx-flux",
        "name": "// raw 버킷의 측정 목록",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "fn-tagkeys"
            ]
        ]
    },
    {
        "id": "fn-tagkeys",
        "type": "function",
        "z": "tab-influx-flux",
        "name": "// raw 버킷의 측정 목록",
        "func": "// 가장 단순한 쿼리 - 최근 데이터 10개만\nconst BUCKET = \"5603a3eb-89e2-4e15-8cbb-60750c6588d3_raw\";\nmsg.query = `from(bucket:\"${BUCKET}\") |> range(start:-2h) |> limit(n:20)`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 140,
        "wires": [
            [
                "infx"
            ]
        ]
    },
    {
        "id": "inj-tagvalues",
        "type": "inject",
        "z": "tab-influx-flux",
        "name": "태그값(tagValues)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "fn-tagvalues"
            ]
        ]
    },
    {
        "id": "fn-tagvalues",
        "type": "function",
        "z": "tab-influx-flux",
        "name": "meta 버킷",
        "func": "// meta 버킷 - 더 긴 기간으로 조회\nconst BUCKET = \"5603a3eb-89e2-4e15-8cbb-60750c6588d3_meta\";\nmsg.query = `from(bucket:\"${BUCKET}\") |> range(start:-24d) |> limit(n:10)`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 220,
        "wires": [
            [
                "6db68e832dac249a"
            ]
        ]
    },
    {
        "id": "infx",
        "type": "influxdb in",
        "z": "tab-influx-flux",
        "influxdb": "influx_cfg",
        "name": "Influx(Flux 실행)",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "EON",
        "x": 680,
        "y": 140,
        "wires": [
            [
                "dbg-out"
            ]
        ]
    },
    {
        "id": "dbg-out",
        "type": "debug",
        "z": "tab-influx-flux",
        "name": "조회 결과",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 880,
        "y": 140,
        "wires": []
    },
    {
        "id": "6db68e832dac249a",
        "type": "influxdb in",
        "z": "tab-influx-flux",
        "influxdb": "influx_cfg",
        "name": "Influx(Flux 실행)",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "EON",
        "x": 690,
        "y": 220,
        "wires": [
            [
                "e7b39e97170c2950"
            ]
        ]
    },
    {
        "id": "e7b39e97170c2950",
        "type": "debug",
        "z": "tab-influx-flux",
        "name": "조회 결과",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 890,
        "y": 220,
        "wires": []
    },
    {
        "id": "362256fbe05feeae",
        "type": "inject",
        "z": "tab-influx-flux",
        "name": "// raw 버킷의 측정 목록",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 320,
        "wires": [
            [
                "1dd1b8003813c3fa"
            ]
        ]
    },
    {
        "id": "1dd1b8003813c3fa",
        "type": "function",
        "z": "tab-influx-flux",
        "name": "고유한 측정/필드/태그 값들 확인",
        "func": "// 고유한 측정, 필드, 태그 조합 확인\nconst BUCKET = \"5603a3eb-89e2-4e15-8cbb-60750c6588d3_raw\";\nmsg.query = `from(bucket:\"${BUCKET}\")\n  |> range(start:-24h)\n  |> group()\n  |> distinct(column: \"_measurement\")\n  |> sort()`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 320,
        "wires": [
            [
                "da109cf0026ee13e"
            ]
        ]
    },
    {
        "id": "da109cf0026ee13e",
        "type": "influxdb in",
        "z": "tab-influx-flux",
        "influxdb": "influx_cfg",
        "name": "Influx(Flux 실행)",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "EON",
        "x": 710,
        "y": 320,
        "wires": [
            [
                "09262d4fa34c322b"
            ]
        ]
    },
    {
        "id": "09262d4fa34c322b",
        "type": "debug",
        "z": "tab-influx-flux",
        "name": "조회 결과",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 910,
        "y": 320,
        "wires": []
    },
    {
        "id": "c061b7fba77ab0f3",
        "type": "inject",
        "z": "e1f88c7373da6479",
        "name": "메타 → 태그 동기화",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "56e065d2b143ba24"
            ]
        ]
    },
    {
        "id": "56e065d2b143ba24",
        "type": "function",
        "z": "e1f88c7373da6479",
        "name": "Flux 쿼리(meta json)",
        "func": "// META_BUCKET과 ORG만 변경\nconst META_BUCKET = \"5603a3eb-89e2-4e15-8cbb-60750c6588d3_meta\";\nmsg.query = `from(bucket:\"${META_BUCKET}\")\\n  |> range(start: -30d)\\n  |> filter(fn: (r) => r._measurement == \"schema\" and r._field == \"json\")\\n  |> last()\\n  |> keep(columns: [\"_value\"])`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 100,
        "wires": [
            [
                "2813442f2ff20b7a"
            ]
        ]
    },
    {
        "id": "2813442f2ff20b7a",
        "type": "influxdb in",
        "z": "e1f88c7373da6479",
        "influxdb": "influx_cfg",
        "name": "Influx(Flux 실행)",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "EON",
        "x": 660,
        "y": 100,
        "wires": [
            [
                "bbeae2cd9066a6fe",
                "a66b6ee9342c7cec"
            ]
        ]
    },
    {
        "id": "bbeae2cd9066a6fe",
        "type": "debug",
        "z": "e1f88c7373da6479",
        "name": "influx meta rows",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 870,
        "y": 60,
        "wires": []
    },
    {
        "id": "a66b6ee9342c7cec",
        "type": "function",
        "z": "e1f88c7373da6479",
        "name": "SQL 빌드(업서트)",
        "func": "const raw = msg.payload[0]._value; // Influx meta JSON 문자열\nmsg.query = `\nWITH j AS (\n  SELECT jsonb_array_elements(($$${raw}$$)::jsonb->'RawDataColumns') AS r\n)\nINSERT INTO influx_tag (key, tag_id, tag_name, tag_type, meta, updated_at)\nSELECT r->>'DataId', r->>'DataId', r->>'DataName', r->>'DataType', r, now()\nFROM j\nON CONFLICT (key)\nDO UPDATE SET\n  tag_id=EXCLUDED.tag_id, tag_name=EXCLUDED.tag_name,\n  tag_type=EXCLUDED.tag_type, meta=EXCLUDED.meta, updated_at=now();\n`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 100,
        "wires": [
            [
                "0b97a119a21ab0a2",
                "02a1d6f4e0cbdc30"
            ]
        ]
    },
    {
        "id": "02a1d6f4e0cbdc30",
        "type": "debug",
        "z": "e1f88c7373da6479",
        "name": "SQL 미리보기",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "query",
        "targetType": "msg",
        "x": 1090,
        "y": 60,
        "wires": []
    },
    {
        "id": "4c8023012d7c56e6",
        "type": "debug",
        "z": "e1f88c7373da6479",
        "name": "업서트 완료",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1670,
        "y": 100,
        "wires": []
    },
    {
        "id": "0b97a119a21ab0a2",
        "type": "postgresql",
        "z": "e1f88c7373da6479",
        "name": "Upsert to influx_tag",
        "query": "",
        "postgreSQLConfig": "faaad4cdf9594a0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1450,
        "y": 100,
        "wires": [
            [
                "4c8023012d7c56e6"
            ]
        ]
    },
    {
        "id": "73e414c17cf41382",
        "type": "inject",
        "z": "52cfb2f927f95475",
        "name": "10s 주기 폴링",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "268319832a72ed03"
            ]
        ]
    },
    {
        "id": "268319832a72ed03",
        "type": "function",
        "z": "52cfb2f927f95475",
        "name": "Flux 쿼리(최근 5분)",
        "func": "const RAW_BUCKET = \"5603a3eb-89e2-4e15-8cbb-60750c6588d3_raw\"; // 예: 5603..._raw\nmsg.query = `from(bucket:\"${RAW_BUCKET}\")\\n  |> range(start: -5m)\\n  |> filter(fn: (r) => r._measurement == \"1\")\\n  |> keep(columns: [\"_time\",\"_field\",\"_value\"])`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 100,
        "wires": [
            [
                "cfbea46875fe2fea"
            ]
        ]
    },
    {
        "id": "cfbea46875fe2fea",
        "type": "influxdb in",
        "z": "52cfb2f927f95475",
        "influxdb": "influx_cfg",
        "name": "Influx(Flux 실행)",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "EON",
        "x": 660,
        "y": 100,
        "wires": [
            [
                "fb5d7322a2d95f32",
                "8be605b000e227c4"
            ]
        ]
    },
    {
        "id": "fb5d7322a2d95f32",
        "type": "debug",
        "z": "52cfb2f927f95475",
        "name": "influx rows",
        "active": true,
        "tosidebar": true,
        "complete": "payload",
        "targetType": "msg",
        "x": 870,
        "y": 60,
        "wires": []
    },
    {
        "id": "8be605b000e227c4",
        "type": "split",
        "z": "52cfb2f927f95475",
        "name": "행 단위 분할",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": "1",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 860,
        "y": 100,
        "wires": [
            [
                "af99d3c899b47a31"
            ]
        ]
    },
    {
        "id": "af99d3c899b47a31",
        "type": "function",
        "z": "52cfb2f927f95475",
        "name": "INSERT influx_hist",
        "func": "// 입력: msg.payload = [{ _time, _field, _value, _measurement }, ...]\n// 전제: 메타 동기화로 influx_tag(tag_id→tag_name) 선반영됨\n// 선택: global.qcRules 캐시에 규칙 있으면 QC 적용, 없으면 0\n\nconst rowsIn = Array.isArray(msg.payload) ? msg.payload : (msg.payload ? [msg.payload] : []);\nconst rules = global.get('qcRules') || {};\nconst last  = global.get('qcLast')  || {};\n\nfunction qcFor(tagName, ts, value) {\n  if (value == null || Number.isNaN(Number(value))) return {code: 5, reason: ['invalid']};\n  const r = rules[tagName] || {};\n  const reasons = [];\n  let code = 0;\n  if (r.allow_negative === false && value < 0) { code = 6; reasons.push('negative_not_allowed'); }\n  if (r.min_val != null && value < r.min_val)   { code = Math.max(code,1); reasons.push('below_min'); }\n  if (r.max_val != null && value > r.max_val)   { code = Math.max(code,2); reasons.push('above_max'); }\n  const prev = last[tagName];\n  if (r.max_step != null && prev && Math.abs(value - prev.value) > r.max_step) { code = Math.max(code,3); reasons.push('spike'); }\n  if (r.max_gap_seconds != null) {\n    const ageSec = (Date.now() - new Date(ts).getTime())/1000;\n    if (ageSec > r.max_gap_seconds) { code = Math.max(code,4); reasons.push('stale'); }\n  }\n  if (reasons.length === 0) reasons.push('ok');\n  return {code, reason: reasons};\n}\n\nconst cleaned = rowsIn\n  .filter(r => r && r._time && r._field != null && r._value != null)\n  .map(r => {\n    const tagId = String(r._field);\n    const val = Number(r._value);\n    const q = qcFor(tagId, r._time, val); // tagName 미확정 단계라 임시로 tagId 기준\n    last[tagId] = { ts: r._time, value: val };\n    return {\n      _time: r._time,\n      _field: tagId,\n      _value: val,\n      qc: q.code,\n      meta: {\n        source: 'influx',\n        measurement: r._measurement ?? null,\n        tag_id: tagId,\n        qc: { code: q.code, reason: q.reason }\n      }\n    };\n  });\n\nglobal.set('qcLast', last);\nif (!cleaned.length) { node.warn('no rows'); return null; }\n\n// 청크 분할로 타임아웃 완화\nconst chunkSize = 500;\nconst outs = [];\nfor (let i = 0; i < cleaned.length; i += chunkSize) {\n  const chunk = cleaned.slice(i, i + chunkSize);\n  outs.push({\n    query: `\nWITH rows AS (\n  SELECT (x->>'_time')::timestamptz AS ts,\n         (x->>'_field')             AS tag_id,\n         (x->>'_value')::float8     AS value,\n         (x->>'qc')::int2           AS qc,\n         (x->'meta')::jsonb         AS meta\n  FROM jsonb_array_elements($1::jsonb) x\n)\nINSERT INTO influx_hist (ts, tag_name, value, qc, meta)\nSELECT r.ts, t.tag_name, r.value, r.qc, r.meta\nFROM rows r\nJOIN influx_tag t ON t.tag_id = r.tag_id     -- FK 보장: 매핑 존재분만\nON CONFLICT (ts, tag_name) DO UPDATE\nSET value = EXCLUDED.value,\n    qc    = EXCLUDED.qc,\n    meta  = EXCLUDED.meta;\n`,\n    params: [JSON.stringify(chunk)]\n  });\n}\n// Postgres 노드 하나에 메시지 배열 보내기\nreturn [outs];",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 100,
        "wires": [
            [
                "d2b5135c1d54a41a",
                "d55520b6641ce5f5"
            ]
        ]
    },
    {
        "id": "d55520b6641ce5f5",
        "type": "debug",
        "z": "52cfb2f927f95475",
        "name": "sql preview",
        "active": false,
        "tosidebar": true,
        "complete": "query",
        "targetType": "msg",
        "x": 1290,
        "y": 60,
        "wires": []
    },
    {
        "id": "a776a8a41203bbca",
        "type": "debug",
        "z": "52cfb2f927f95475",
        "name": "insert ok",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 100,
        "wires": []
    },
    {
        "id": "d2b5135c1d54a41a",
        "type": "postgresql",
        "z": "52cfb2f927f95475",
        "name": "INSERT(hist)",
        "query": "",
        "postgreSQLConfig": "daea810c54b67f2c",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1290,
        "y": 100,
        "wires": [
            [
                "a776a8a41203bbca"
            ]
        ]
    },
    {
        "id": "b6de285a6553c899",
        "type": "inject",
        "z": "ddfc91b523909b9a",
        "name": "스키마 생성 실행",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "4c0388f92f957967"
            ]
        ]
    },
    {
        "id": "4c0388f92f957967",
        "type": "function",
        "z": "ddfc91b523909b9a",
        "name": "1. Tag 테이블 생성",
        "func": "msg.step = 1;\nmsg.query = `CREATE TABLE IF NOT EXISTS influx_tag (\n  key text PRIMARY KEY,\n  tag_id text NOT NULL,\n  tag_name text NOT NULL,\n  tag_type text DEFAULT 'Analog',\n  updated_at timestamptz DEFAULT NOW()\n)`;\nnode.log('influx_tag 테이블 생성 (key, tag_id, tag_name, tag_type)');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 80,
        "wires": [
            [
                "9423848f541c5e7b"
            ]
        ]
    },
    {
        "id": "3ef8516c7202081a",
        "type": "function",
        "z": "ddfc91b523909b9a",
        "name": "2. Hist 테이블 생성",
        "func": "msg.step = 2;\nmsg.query = `CREATE TABLE IF NOT EXISTS influx_hist (\n  ts timestamptz NOT NULL,\n  tag_name text NOT NULL,\n  value double precision,\n  PRIMARY KEY (ts, tag_name)\n)`;\nnode.log('influx_hist 테이블 생성 (ts, tag_name, value)');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 80,
        "wires": [
            [
                "0bd39389356fd108"
            ]
        ]
    },
    {
        "id": "1a28a0495d1e0456",
        "type": "function",
        "z": "ddfc91b523909b9a",
        "name": "3. 하이퍼테이블 생성",
        "func": "msg.step = 3;\nmsg.query = `SELECT create_hypertable('influx_hist', 'ts', if_not_exists => TRUE)`;\nnode.log('TimescaleDB 하이퍼테이블 생성 (ts 기준)');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 80,
        "wires": [
            [
                "911f67c53bf6a91f"
            ]
        ]
    },
    {
        "id": "fd8117419b6caf9d",
        "type": "function",
        "z": "ddfc91b523909b9a",
        "name": "4. 로그 테이블 생성",
        "func": "msg.step = 4;\n// 🔧 수정: operation_log도 ts 컬럼 사용\nmsg.query = `CREATE TABLE IF NOT EXISTS influx_op_log (\n  ts timestamptz NOT NULL,\n  state text NOT NULL,\n  PRIMARY KEY (ts)\n)`;\nnode.log('operation_log 테이블 생성 (ts, state)');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 80,
        "wires": [
            [
                "d1b5236edce8446a"
            ]
        ]
    },
    {
        "id": "0b5c8cafe51e5035",
        "type": "function",
        "z": "ddfc91b523909b9a",
        "name": "5. 인덱스 생성",
        "func": "msg.step = 5;\nmsg.query = `CREATE INDEX IF NOT EXISTS ix_influx_hist_tag_ts ON influx_hist (tag_name, ts DESC)`;\nnode.log('인덱스 생성 (tag_name, ts)');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 160,
        "wires": [
            [
                "693c71a0bd751735"
            ]
        ]
    },
    {
        "id": "d3ecf0c1110af5bb",
        "type": "function",
        "z": "ddfc91b523909b9a",
        "name": "6. 초기화 로그",
        "func": "msg.step = 6;\n// 🔧 수정: INSERT도 ts 컬럼 사용\nmsg.query = `INSERT INTO influx_op_log (ts, state) VALUES (NOW(), 'schema_created')`;\nnode.log('스키마 생성 완료 로그');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 160,
        "wires": [
            [
                "97ead78eea114425"
            ]
        ]
    },
    {
        "id": "a9204f4177d2919d",
        "type": "debug",
        "z": "ddfc91b523909b9a",
        "name": "스키마 생성 완료",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1060,
        "y": 160,
        "wires": []
    },
    {
        "id": "9423848f541c5e7b",
        "type": "postgresql",
        "z": "ddfc91b523909b9a",
        "name": "Tag 테이블",
        "query": "",
        "postgreSQLConfig": "pg_config",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 80,
        "wires": [
            [
                "3ef8516c7202081a"
            ]
        ]
    },
    {
        "id": "0bd39389356fd108",
        "type": "postgresql",
        "z": "ddfc91b523909b9a",
        "name": "Hist 테이블",
        "query": "",
        "postgreSQLConfig": "pg_config",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1040,
        "y": 80,
        "wires": [
            [
                "1a28a0495d1e0456"
            ]
        ]
    },
    {
        "id": "911f67c53bf6a91f",
        "type": "postgresql",
        "z": "ddfc91b523909b9a",
        "name": "하이퍼테이블",
        "query": "",
        "postgreSQLConfig": "pg_config",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1500,
        "y": 80,
        "wires": [
            [
                "fd8117419b6caf9d"
            ]
        ]
    },
    {
        "id": "d1b5236edce8446a",
        "type": "postgresql",
        "z": "ddfc91b523909b9a",
        "name": "로그 테이블",
        "query": "",
        "postgreSQLConfig": "pg_config",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1940,
        "y": 80,
        "wires": [
            [
                "0b5c8cafe51e5035"
            ]
        ]
    },
    {
        "id": "693c71a0bd751735",
        "type": "postgresql",
        "z": "ddfc91b523909b9a",
        "name": "인덱스",
        "query": "",
        "postgreSQLConfig": "pg_config",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 380,
        "y": 160,
        "wires": [
            [
                "d3ecf0c1110af5bb"
            ]
        ]
    },
    {
        "id": "97ead78eea114425",
        "type": "postgresql",
        "z": "ddfc91b523909b9a",
        "name": "초기화 로그",
        "query": "",
        "postgreSQLConfig": "pg_config",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 820,
        "y": 160,
        "wires": [
            [
                "a9204f4177d2919d"
            ]
        ]
    },
    {
        "id": "8163f9511e655073",
        "type": "inject",
        "z": "4a01622f2f08cae3",
        "name": "태그 동기화 (5분)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "5bc2c01fe41a5ce8"
            ]
        ]
    },
    {
        "id": "5c21adcb1aa1c260",
        "type": "inject",
        "z": "4a01622f2f08cae3",
        "name": "데이터 수집 (30초)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 300,
        "wires": [
            [
                "13c44a5b3c3c3618"
            ]
        ]
    },
    {
        "id": "5bc2c01fe41a5ce8",
        "type": "function",
        "z": "4a01622f2f08cae3",
        "name": "Meta 스키마 조회",
        "func": "// meta 버킷에서 최신 스키마 정보 조회\nconst BUCKET = '5603a3eb-89e2-4e15-8cbb-60750c6588d3_meta';\nmsg.query = `from(bucket:\"${BUCKET}\")\n  |> range(start:-7d)\n  |> filter(fn: (r) => r._measurement == \"schema\" and r._field == \"json\")\n  |> last()`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 80,
        "wires": [
            [
                "44d6f8ce7b336192"
            ]
        ]
    },
    {
        "id": "44d6f8ce7b336192",
        "type": "influxdb in",
        "z": "4a01622f2f08cae3",
        "influxdb": "influx_cfg",
        "name": "Meta 조회",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "EON",
        "x": 600,
        "y": 80,
        "wires": [
            [
                "492f99d82e324b4e"
            ]
        ]
    },
    {
        "id": "492f99d82e324b4e",
        "type": "function",
        "z": "4a01622f2f08cae3",
        "name": "태그 파싱",
        "func": "// JSON 파싱 및 센서 정보 추출\nif (!msg.payload || msg.payload.length === 0) {\n  node.error('Meta 스키마 정보 없음');\n  return null;\n}\n\nconst schemaJson = msg.payload[0]._value;\nlet schema;\ntry {\n  schema = JSON.parse(schemaJson);\n} catch (e) {\n  node.error('JSON 파싱 실패: ' + e.message);\n  return null;\n}\n\n// RawDataColumns 추출\nconst sensors = schema.RawDataColumns || [];\nnode.log(`발견된 센서: ${sensors.length}개`);\n\n// 기존 태그 삭제\nmsg.sensors = sensors;\nmsg.query = `DELETE FROM influx_tag`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 820,
        "y": 80,
        "wires": [
            [
                "cade5c1345748323"
            ]
        ]
    },
    {
        "id": "880f1852b87fe36d",
        "type": "function",
        "z": "4a01622f2f08cae3",
        "name": "태그 삽입",
        "func": "const sensors = msg.sensors;\n\n// 동적 센서 정보 삽입 - 최종 컬럼명 적용\nconst insertValues = sensors.map(sensor => {\n  const key = sensor.DataId.toString().replace(/'/g, \"''\");        // key (PK)\n  const tagId = sensor.DataId.toString().replace(/'/g, \"''\");      // tag_id\n  const tagName = sensor.DataName.toString().replace(/'/g, \"''\");  // tag_name\n  const tagType = (sensor.DataType || 'Analog').toString().replace(/'/g, \"''\"); // tag_type\n  \n  return `('${key}', '${tagId}', '${tagName}', '${tagType}')`;\n}).join(',');\n\nmsg.query = `INSERT INTO influx_tag (key, tag_id, tag_name, tag_type) VALUES ${insertValues}`;\nnode.log(`${sensors.length}개 태그 삽입 (key, tag_id, tag_name, tag_type)`);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1260,
        "y": 80,
        "wires": [
            [
                "5a0cfc80cc8c57d3"
            ]
        ]
    },
    {
        "id": "b1dc1f36ac973e3b",
        "type": "function",
        "z": "4a01622f2f08cae3",
        "name": "태그 동기화 로그",
        "func": "// 🔧 수정: operation_log의 ts 컬럼 사용\nmsg.query = `INSERT INTO influx_op_log (ts, state) VALUES (NOW(), 'tag_sync')`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 80,
        "wires": [
            [
                "2cfa1b55791c6167"
            ]
        ]
    },
    {
        "id": "13c44a5b3c3c3618",
        "type": "function",
        "z": "4a01622f2f08cae3",
        "name": "태그 목록 조회",
        "func": "// TimescaleDB에서 현재 태그 목록 조회 - 최종 컬럼명\nmsg.query = 'SELECT key, tag_name FROM influx_tag ORDER BY key';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 300,
        "wires": [
            [
                "ab9fd25d9b08d9fe"
            ]
        ]
    },
    {
        "id": "68f1bee030ad46e7",
        "type": "function",
        "z": "4a01622f2f08cae3",
        "name": "Flux 쿼리 구성",
        "func": "const tags = msg.payload;\nif (!tags || tags.length === 0) {\n  node.error('태그 정보 없음 - 먼저 태그 동기화 실행');\n  return null;\n}\n\n// 최근 1분 데이터 조회\nconst BUCKET = '5603a3eb-89e2-4e15-8cbb-60750c6588d3_raw';\nmsg.query = `from(bucket:\"${BUCKET}\")\n  |> range(start:-1m)\n  |> filter(fn: (r) => r._measurement == \"1\")\n  |> last()`;\n\nmsg.tags = tags;\nnode.log(`${tags.length}개 태그로 데이터 조회`);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 820,
        "y": 300,
        "wires": [
            [
                "5ddd8ed6e3011566"
            ]
        ]
    },
    {
        "id": "5ddd8ed6e3011566",
        "type": "influxdb in",
        "z": "4a01622f2f08cae3",
        "influxdb": "influx_cfg",
        "name": "실시간 데이터",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "EON",
        "x": 1040,
        "y": 300,
        "wires": [
            [
                "cdafe5a73bdd1644"
            ]
        ]
    },
    {
        "id": "cdafe5a73bdd1644",
        "type": "function",
        "z": "4a01622f2f08cae3",
        "name": "데이터 변환",
        "func": "const influxData = msg.payload;\nconst tags = msg.tags;\n\nif (!influxData || influxData.length === 0) {\n  node.log('새 데이터 없음');\n  return null;\n}\n\n// 태그 매핑 - key를 기준으로 tag_name 찾기\nconst tagMap = {};\ntags.forEach(t => {\n  tagMap[t.key] = t.tag_name;  // key → tag_name 매핑\n});\n\n// 데이터 변환 - 최종 컬럼명 적용\nconst insertData = [];\ninfluxData.forEach(row => {\n  const fieldKey = row._field;  // InfluxDB field (1~9)\n  const tagName = tagMap[fieldKey] || `Unknown_${fieldKey}`;\n  \n  insertData.push({\n    ts: row._time,      // time → ts\n    tag_name: tagName,  // field_id → tag_name (실제 D100, D101 등)\n    value: row._value\n  });\n});\n\nif (insertData.length > 0) {\n  const values = insertData.map(d => \n    `('${d.ts}', '${d.tag_name}', ${d.value})`\n  ).join(',');\n  \n  // 🔧 수정: influx_hist의 ts, tag_name 컬럼 사용\n  msg.query = `INSERT INTO influx_hist (ts, tag_name, value) VALUES ${values} ON CONFLICT (ts, tag_name) DO UPDATE SET value = EXCLUDED.value`;\n  \n  node.log(`${insertData.length}개 데이터 포인트 변환 (ts, tag_name, value)`);\n  \n  // 디버그용 샘플 출력\n  if (insertData.length > 0) {\n    const sample = insertData[0];\n    node.log(`샘플 데이터: ${sample.ts} | ${sample.tag_name} | ${sample.value}`);\n  }\n} else {\n  return null;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1280,
        "y": 300,
        "wires": [
            [
                "364e0ab1177413da"
            ]
        ]
    },
    {
        "id": "c9d8c992f29bf811",
        "type": "function",
        "z": "4a01622f2f08cae3",
        "name": "데이터 수집 로그",
        "func": "// 🔧 수정: operation_log의 ts 컬럼 사용\nconst rowCount = msg.pgsql ? msg.pgsql.rowCount : 0;\nmsg.query = `INSERT INTO influx_op_log (ts, state) VALUES (NOW(), 'data_collected_${rowCount}')`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 300,
        "wires": [
            [
                "1e37f1af95c51353"
            ]
        ]
    },
    {
        "id": "cade5c1345748323",
        "type": "postgresql",
        "z": "4a01622f2f08cae3",
        "name": "기존 태그 삭제",
        "query": "",
        "postgreSQLConfig": "pg_config",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1040,
        "y": 80,
        "wires": [
            [
                "880f1852b87fe36d"
            ]
        ]
    },
    {
        "id": "5a0cfc80cc8c57d3",
        "type": "postgresql",
        "z": "4a01622f2f08cae3",
        "name": "태그 삽입",
        "query": "",
        "postgreSQLConfig": "pg_config",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1480,
        "y": 80,
        "wires": [
            [
                "b1dc1f36ac973e3b"
            ]
        ]
    },
    {
        "id": "2cfa1b55791c6167",
        "type": "postgresql",
        "z": "4a01622f2f08cae3",
        "name": "태그 로그",
        "query": "",
        "postgreSQLConfig": "pg_config",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 0,
        "x": 1920,
        "y": 80,
        "wires": []
    },
    {
        "id": "ab9fd25d9b08d9fe",
        "type": "postgresql",
        "z": "4a01622f2f08cae3",
        "name": "태그 목록",
        "query": "",
        "postgreSQLConfig": "pg_config",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 300,
        "wires": [
            [
                "68f1bee030ad46e7"
            ]
        ]
    },
    {
        "id": "364e0ab1177413da",
        "type": "postgresql",
        "z": "4a01622f2f08cae3",
        "name": "데이터 저장",
        "query": "",
        "postgreSQLConfig": "pg_config",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1500,
        "y": 300,
        "wires": [
            [
                "c9d8c992f29bf811"
            ]
        ]
    },
    {
        "id": "1e37f1af95c51353",
        "type": "postgresql",
        "z": "4a01622f2f08cae3",
        "name": "데이터 로그",
        "query": "",
        "postgreSQLConfig": "pg_config",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 0,
        "x": 1940,
        "y": 300,
        "wires": []
    },
    {
        "id": "ccd739d01a2c78aa",
        "type": "mqtt in",
        "z": "1dfd38348c12707e",
        "name": "REQ get_tags",
        "topic": "viewer/cmd/get_tags",
        "qos": "1",
        "datatype": "auto",
        "broker": "cfg_mqtt",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 100,
        "wires": [
            [
                "f222d4daf3c7b67c"
            ]
        ]
    },
    {
        "id": "f222d4daf3c7b67c",
        "type": "function",
        "z": "1dfd38348c12707e",
        "name": "build SQL (get_tags)",
        "func": "const p = typeof msg.payload === 'string' ? JSON.parse(msg.payload) : (msg.payload||{});\nmsg._reqId=p.reqId||null; msg._replyTo=p.replyTo||null;\nmsg.query = \"SELECT key, tag_id, tag_name, tag_type FROM influx_tag ORDER BY key;\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 120,
        "wires": [
            [
                "a415d109f22bf4c1"
            ]
        ]
    },
    {
        "id": "ee98a3caa597f42a",
        "type": "function",
        "z": "1dfd38348c12707e",
        "name": "replyTo(JSON)",
        "func": "const rows=Array.isArray(msg.payload)?msg.payload:(msg.payload&&msg.payload.rows)||[];\nif(!msg._replyTo){return null;}\nmsg.topic=msg._replyTo; msg.payload=JSON.stringify({ok:true,rows,ts:Date.now(),reqId:msg._reqId}); msg.retain=true; return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 860,
        "y": 80,
        "wires": [
            [
                "e37349973161e380",
                "b330db616dd8cc69"
            ]
        ]
    },
    {
        "id": "a0181ee6bf26737b",
        "type": "function",
        "z": "1dfd38348c12707e",
        "name": "viewer/tags (retained)",
        "func": "const rows=Array.isArray(msg.payload)?msg.payload:(msg.payload&&msg.payload.rows)||[];\nmsg.topic='viewer/tags'; msg.payload=JSON.stringify({rows,ts:Date.now()}); msg.retain=true; return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 860,
        "y": 160,
        "wires": [
            [
                "e37349973161e380",
                "e817c654f2006a3c"
            ]
        ]
    },
    {
        "id": "b51dc4b6a1d98b0f",
        "type": "inject",
        "z": "1dfd38348c12707e",
        "name": "on start +60s",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 170,
        "wires": [
            [
                "f222d4daf3c7b67c"
            ]
        ]
    },
    {
        "id": "0848a6bf6ebc4a1d",
        "type": "mqtt in",
        "z": "1dfd38348c12707e",
        "name": "REQ get_hist",
        "topic": "viewer/cmd/get_hist",
        "qos": "1",
        "datatype": "auto",
        "broker": "cfg_mqtt",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 260,
        "wires": [
            [
                "e9dccaac746d7dbe"
            ]
        ]
    },
    {
        "id": "e9dccaac746d7dbe",
        "type": "function",
        "z": "1dfd38348c12707e",
        "name": "build SQL (get_hist)",
        "func": "const p=typeof msg.payload==='string'?JSON.parse(msg.payload):(msg.payload||{});\nconst tag=(p.tag_name||p.tag||'').toString(); if(!tag){node.warn('tag_name required');return null;}\nconst esc=tag.replace(/'/g,\"''\");\nconst toInt=s=>{const m=/^(\\d+)([smhdw])$/.exec(s||''); if(!m)return '24 hours'; const n=+m[1]; const map={s:'seconds',m:'minutes',h:'hours',d:'days',w:'weeks'}; return `${n} ${map[m[2]]}`;};\nconst range=toInt(p.range||'24h');\nif(p.agg){const m={avg:'avg',sum:'sum',min:'min',max:'max'}; const f=m[p.agg]||'avg'; const b=toInt(p.bucket||'1m'); msg.query=`SELECT time_bucket(INTERVAL '${b}', ts) AS ts, ${f}(value) AS value FROM influx_hist WHERE tag_name='${esc}' AND ts>=now()-INTERVAL '${range}' GROUP BY ts ORDER BY ts;`;} else { msg.query=`SELECT ts,value FROM influx_hist WHERE tag_name='${esc}' AND ts>=now()-INTERVAL '${range}' ORDER BY ts LIMIT 10000;`; }\nmsg._reqId=p.reqId||null; msg._replyTo=p.replyTo||null; return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 260,
        "wires": [
            [
                "aa940e119f3b9d3f"
            ]
        ]
    },
    {
        "id": "e63724f5dcaea4db",
        "type": "function",
        "z": "1dfd38348c12707e",
        "name": "replyTo(JSON)",
        "func": "const rows=Array.isArray(msg.payload)?msg.payload:(msg.payload&&msg.payload.rows)||[];\nif(!msg._replyTo){return null;}\nmsg.topic=msg._replyTo; msg.payload=JSON.stringify({ok:true,rows,ts:Date.now(),reqId:msg._reqId}); msg.retain=false; return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 850,
        "y": 260,
        "wires": [
            [
                "e37349973161e380"
            ]
        ]
    },
    {
        "id": "77e6bd823b9075ee",
        "type": "inject",
        "z": "1dfd38348c12707e",
        "name": "live poll 2s",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 360,
        "wires": [
            [
                "78be7b23ae7aecbe"
            ]
        ]
    },
    {
        "id": "78be7b23ae7aecbe",
        "type": "function",
        "z": "1dfd38348c12707e",
        "name": "build SQL (live last per tag)",
        "func": "msg.query=\"SELECT DISTINCT ON (tag_name) tag_name, value, ts FROM influx_hist ORDER BY tag_name, ts DESC;\"; return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 360,
        "wires": [
            [
                "dc3b4ac0a36589c7"
            ]
        ]
    },
    {
        "id": "ec4a1968bd45eb5c",
        "type": "function",
        "z": "1dfd38348c12707e",
        "name": "viewer/live/* (retain+dedupe)",
        "func": "const rows=Array.isArray(msg.payload)?msg.payload:[]; const last=context.get('last')||{}; rows.forEach(r=>{const tag=r.tag_name; const t=new Date(r.ts).getTime(); if(!last[tag]||t>last[tag]){ last[tag]=t; node.send({topic:`viewer/live/${tag}`,payload:JSON.stringify({tag_name:tag,ts:r.ts,value:Number(r.value)}),retain:true}); }}); context.set('last',last); return null;",
        "outputs": 1,
        "noerr": 0,
        "x": 850,
        "y": 360,
        "wires": [
            [
                "e37349973161e380"
            ]
        ]
    },
    {
        "id": "e37349973161e380",
        "type": "mqtt out",
        "z": "1dfd38348c12707e",
        "name": "MQTT out",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cfg_mqtt",
        "x": 1110,
        "y": 220,
        "wires": []
    },
    {
        "id": "b330db616dd8cc69",
        "type": "debug",
        "z": "1dfd38348c12707e",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 80,
        "wires": []
    },
    {
        "id": "e817c654f2006a3c",
        "type": "debug",
        "z": "1dfd38348c12707e",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 140,
        "wires": []
    },
    {
        "id": "549de70563f0f6e3",
        "type": "debug",
        "z": "1dfd38348c12707e",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 40,
        "wires": []
    },
    {
        "id": "0318208a281c4711",
        "type": "debug",
        "z": "1dfd38348c12707e",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 420,
        "wires": []
    },
    {
        "id": "a415d109f22bf4c1",
        "type": "postgresql",
        "z": "1dfd38348c12707e",
        "name": "",
        "query": "SELECT * FROM ;",
        "postgreSQLConfig": "pg_config",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 610,
        "y": 160,
        "wires": [
            [
                "549de70563f0f6e3",
                "ee98a3caa597f42a",
                "a0181ee6bf26737b"
            ]
        ]
    },
    {
        "id": "aa940e119f3b9d3f",
        "type": "postgresql",
        "z": "1dfd38348c12707e",
        "name": "",
        "query": "SELECT * FROM ;",
        "postgreSQLConfig": "pg_config",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 610,
        "y": 260,
        "wires": [
            [
                "e63724f5dcaea4db"
            ]
        ]
    },
    {
        "id": "dc3b4ac0a36589c7",
        "type": "postgresql",
        "z": "1dfd38348c12707e",
        "name": "",
        "query": "SELECT * FROM ;",
        "postgreSQLConfig": "pg_config",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 610,
        "y": 360,
        "wires": [
            [
                "ec4a1968bd45eb5c",
                "0318208a281c4711"
            ]
        ]
    },
    {
        "id": "dff0328379c84aa8",
        "type": "global-config",
        "env": [],
        "modules": {
            "node-red-contrib-influxdb": "0.7.0",
            "node-red-contrib-postgresql": "0.14.2"
        }
    }
]
